<?php

//apd_set_pprof_trace(); 

/**
* wp-gallery-mail.php  V0.2
*
* Copyright (c) 2003-2005 The Wordpress Team
* Copyright (c) 2004-2005 - John B. Hewitt - jb@stcpl.com.au
* Copyright (c) 2004 - Dan Cech - dcech@lansmash.com
* Copyright (c) 2005 Ian Tomey
*
* Licensed under the GNU GPL. For full terms see the file COPYING.
*
* -= README =-
* This is a drop in replacement modification for the Wordpress 1.2 series that enables
* you to send e-mail's with picture and document attachments.
* Images are sent to gallery ( http://gallery.sf.net ) albums
**/
	
	// Load up some libraries
	$ROOTDIR = realpath(dirname(__FILE__).'/../../..'); //area where wordpress is, i.e. /var/www/wordpress
	require($ROOTDIR . '/wp-config.php');
	require_once ( dirname(__FILE__).'/mimedecode.php' );

	$parsed = parse_url(get_settings('siteurl'));
	$wpUrlPath = $parsed['path'];

	// load configuration

	if ( !get_option('wgm-correct-config') )
		die ("Options not configured correctly, please see the options plugin page for wp-gallery-mail");
	
	$GALLERY_DIR = get_option( 'wgm-galleryDir' );
	$FILES_PATH = '/wp-content/'.get_option( 'wgm-filesPath' ).'/';
	$FILES_PATH = preg_replace('/\/\/+/', '/', $FILES_PATH);			// remove double /s
	$defaultAlbum = get_option( 'wgm-defaultAlbum' );
	$linkImageToPost = get_option( 'wgm-linkImageToPost' );
	$defaultTitle = get_option( 'wgm-defaultTitle' );
	$input_protocol = get_option( 'wgm-inputProtocol' );
	$dropSignature = get_option( 'wgm-dropSignature' );
	$default_poster_id = get_option('wgm-defaultPosterID' );

	$time_difference = get_settings('gmt_offset');
	$delete_email = true;	
		
	// check request overrides
	if ( $_REQUEST['delete_email']!='' )
		$delete_email = $_REQUEST['delete_email'];
	if ( $_REQUEST['input_protocol']!='' )
		$input_protocol = $_REQUEST['input_protocol'];
	if ( $_REQUEST['email_file']!='' ) {
		$emailFile = $_REQUEST['email_file'];
		if ( strpos( $emailFile, '/' )!==false || strpos( $emailFile, "\\")!==false )
			die("Illegal email filename");
		$input_protocol=2;
	}
	
	// load gallery software
	require( $GALLERY_DIR . '/init.php' );

	define( "BODYTYPE_PLAIN", 1 );
	define( 'BODYTYPE_ENRICHED', 5 );
	define( 'BODYTYPE_HTML', 10 );
	
	error_reporting( E_ERROR | E_WARNING | E_PARSE );
	
	//Retreive emails 
	switch ( $input_protocol ) {
		case '1': //smtp - direct 
			$fd = fopen("php://stdin", "r");
			$input = "";
			while (!feof($fd)) {
			    $input .= fread($fd, 1024);
			}
			fclose($fd);
			processEmail( $input );
			break;
			
		case '2': // email file
			$filename = realpath( $ROOTDIR. $FILES_PATH ). '/'.$emailFile;
			processEmail( file_get_contents($filename) );
			if ( $delete_email )
				unlink($filename);
			break;
			
		default: //pop3 
			$emails = pop3_retr( $delete_email );
		}

	die;

//retrieve POP3 mail
function pop3_retr ( $delete_email )
{			
	require_once(ABSPATH.WPINC.'/class-pop3.php');
	
	$pop3 = new POP3();
	if (!$pop3->connect(get_settings('mailserver_url'), get_settings('mailserver_port'))) {
		printMessage( "Unable to connect to pop3 server - $pop3->ERROR \n" );
		return;
	}

	//Check to see if there is any mail, if not then exit
	$msg_count = pop3_login( $pop3, get_settings('mailserver_login'), get_settings('mailserver_pass'));
	if ( $msg_count === 0 ) {
		$pop3->quit();
		printMessage(  "No new email" );
		return;
	} else if ( $msg_count === false ) {
		$pop3->quit();
		printMessage(  "Login failed - check username &amp; password" );
		return;
	} else if ( $msg_count == -1 ) {
		$pop3->quit();
		printMessage(  "Error occured during" );
		return;
	}
	
	// loop through messages 
	for ($i=1; $i <= $msg_count; $i++) {
		$email = &implode ( '',$pop3->get($i) );
		
		processEmail($email);
		
		if ( $delete_email == TRUE ) {
			if( !$pop3->delete($i) ) {
				printMessage(  '<p>Unable to delete email $i :'.$pop3->ERROR.'</p></div>' );
				$pop3->reset();
			} 
		}
	}
	//clean up
	$pop3->quit();	
}

// copied out of class-pop3.php from wordpress and modified
// because it didnt work properly
function pop3_login ( &$pop3, $login = "", $pass = "") {
	if( !isset($pop3->FP) ) {
		$pop3->ERROR = _("POP3 login:") . ' ' . _("No connection to server");
		return false;
	} else {
		$fp = $pop3->FP;
		if( !$pop3->user( $login ) ) {
			//  Preserve the error generated by user()
			return false;
		} else {
			$count = $pop3->pass($pass);
			return $count;
		}
	}
}

function processEmail( &$email ) {
	global $wpdb, $defaultTitle, $tableposts, $tablepost2cat, $tablecategories;
	
	flush();
	
	//sanity check to see if there is any info in the message
	if ($email == NULL )
		return;
	
	//decode the mime
	$params['include_bodies'] = true;
	$params['decode_bodies'] = false;
	$params['decode_headers'] = true;
//	$params['input'] = &$email;
	$decode = new Mail_mimeDecode( $email );
	
	$structure = $decode->decode($params);
	#	print_r ($structure);

	unset( $decode );

	//assign the default title/subject
	if ( $structure->headers['subject'] == NULL )
	{
		$subject = $defaultTitle;
	} else {	
		$subject = htmlentities($structure->headers['subject']);
	}
	
	$ddate = trim($structure->headers['date']);
	$from = trim($structure->headers['from']); 

	//Check poster to see if a valid person
	$poster = checkposter($from);

	// if we have an invalid poster, go onto the next email
	if ( $poster == 0 )
		return;

	//default ping/comment status for sanity 
	$comment_status = get_settings('default_comment_status');
	$ping_status = get_settings('default_ping_status');

	//work around for users with extra <> in email address
	if (preg_match('/^[^<>]+<([^<>]+)>$/',$from,$matches))
	{
		$from = $matches[1];
	}
	
	$mail = &get_content( $structure );
	$content = $mail['body'];

	//date reformating 
	$post_date = date('Y-m-d H:i:s', time($ddate) + ($time_difference * 3600));
	$post_date_gmt = gmdate('Y-m-d H:i:s', time($ddate) );
	
	//decode ubb 
	$content = ubb2html($content);	
			
	//try and determine category
	if ( preg_match('/(.+): (.*)/', $subject, $matches) OR preg_match('/\[(.+)\] (.*)/', $subject, $matches) )
	{
		$post_categories[0] = trim($matches[1]);
		$subject = trim($matches[2]);
		
		//Work on the category search to see if we can determine the cat_id	
		//check the database to see if their is a category similar
		$sql_name = 'SELECT cat_ID FROM ' . $tablecategories . ' WHERE cat_name=\'' . addslashes($post_categories[0]) . '\'';
		$sql_id = 'SELECT cat_ID FROM ' . $tablecategories . ' WHERE cat_ID=\'' . addslashes($post_categories[0]) . '\'';

		if ( $post_categories[0] = $wpdb->get_var($sql_name) ) {
			//then category is a named and found 
		} elseif ( $post_categories[0] = $wpdb->get_var($sql_id) ) {
			//then cateogry was an ID and found 
		} else {
			//then there was no found category so use default
			$post_categories[0] = get_settings('default_category');
		}
	} else {
		$post_categories[0] = get_settings('default_category');
	}
	$post_name = preg_replace('/\s\s+/', '-', strtolower($subject));
	
	// Report
	// print '<p><b>Mail Format</b>: ' . $mailformat . '</p>' . "\n";
	printMessage( '<p><b>From</b>: ' . $from . '' . "\n" );
	printMessage(  '<b>Date</b>: ' . $post_date . '' . "\n" );
	printMessage(  '<b>Date GMT</b>: ' . $post_date_gmt . '' . "\n" );
	printMessage(  '<b>Category</b>: ' . $post_categories[0] . '' . "\n" );
	printMessage(  '<b>Subject</b>: ' . $subject . '' . "\n" );
	printMessage(  '<b>Posted content:</b></p><hr style="clear:both"/>' . $content . '<hr style="clear:both"/>' );
	
	$details = array(
		'post_author'		=> $poster,
		'post_date'			=> $post_date,
		'post_date_gmt'		=> $post_date_gmt,
		'post_content'		=> $content,
		'post_title'		=> $subject,
		'post_modified'		=> $post_date,
		'post_modified_gmt'	=> $post_date_gmt,
		'ping_status' => $ping_status,
		'post_name' => $post_name
	);


	//generate sql for insertion	
	$sql = 'INSERT INTO '.$tableposts.' ('. implode(',',array_keys($details)) .') VALUES (\''. implode('\',\'',array_map('addslashes',$details)) . '\')';

	$result = $wpdb->query($sql);
	$post_ID = $wpdb->insert_id;

	if ( count($mail['galleryImagesPosted'])>0 ) {
		global $gallery, $linkImageToPost, $wpUrlPath;
		
		if ($linkImageToPost) {
			for( $i=0; $i<count($mail['galleryImagesPosted']); $i++ ) {
				$postLink = "From blog entry '<a href=\"$wpUrlPath/?p=$post_ID\">$subject</a>'";
				if ( $mail['galleryImagesPosted'][$i]->extraFields['Description']!='' )
					$mail['galleryImagesPosted'][$i]->extraFields['Description'] .= "\n";
				$mail['galleryImagesPosted'][$i]->extraFields['Description'] .= $postLink;
			}
		}
		$gallery->album->save();
	}

	do_action('publish_post', $post_ID);
	do_action('publish_phone', $post_ID);
	pingback($content, $post_ID);

	foreach ($post_categories as $post_category)
	{
		$post_category = intval($post_category);

		// Double check it's not there already
		$exists = $wpdb->get_row("SELECT * FROM $tablepost2cat WHERE post_id = $post_ID AND category_id = $post_category");

		if (!$exists && $result) { 
			$wpdb->query("
			INSERT INTO $tablepost2cat
			(post_id, category_id)
			VALUES
			($post_ID, $post_category)
			");
		}
	}
	flush();
}

// return an html string representing the email content
function &get_content( &$part ) {
	global $FILES_PATH, $ROOTDIR, $gallery, $defaultAlbum, $wpUrlPath;
	
	// get the path to the site
	$params = array( 'URLFILESDIR'=>$wpUrlPath.$FILES_PATH, 'albumName'=>$defaultAlbum );
				
	$content = array();
	get_body_from_mail( $part, $content );
	
	$body = $content['body'];
	
	//body processing
	if ( $content['body-type'] == BODYTYPE_ENRICHED ) {
		//convert enriched text to html
		$body = etf2html( $body ) . "\n";
	} elseif ( $content['body-type'] == BODYTYPE_HTML) {
		//strip excess html
		$body = html2html( $body ) . "\n";
	} else {
		//regular text, so htmlize
		$body = htmlentities( $body ) . "\n";
	}

	$body = filternewlines($body);
	$body = strip_pgp($body);
	if ( $dropSignature )
		$body = removesig($body);

	//look for commands at the top of the post 
	preg_match( '/^\#\(([^\)]*)\)/', $body, $matches );
	if ( $matches[1]!='' ) {
		//remove command text and filter newlines again in case it was on a separate line
		$body = str_replace( $matches[0] , '', $body );
		$body = filternewlines($body);
		runCommands( $matches[1], $params );
	}

	// find <img> tags, extract src and possible comment
	$pattern = "/<img.*?src=(?:\"|\'|)([^\s\'\">]+)(?:\"|\'|).*?>(?:\(([^\)]*)\))?/si";
	preg_match_all( $pattern, $body, $imgtags );

	if ( loadAlbum( $params['albumName'], $params) )
		$postToGallery = true;
	else {
		reportError( "Unable to load any albums", $params );
		$postToGallery = false;
	}

	process_attachments( $part, $body, $imgtags, $params, $postToGallery );

	// add a clear: both style here if we have used floats, otherwise pages will probably display wrong
	if ( $params['used-floats'] )
		$body .= "<div style=\"clear: both; height: 1px; font-size: 1px;\">&nbsp;</div>";
	
	if ( $params['footer-images']!='' )
		$body .= "\r".$params['footer-images'];
	if ( $params['footer-files']!='' )
		$body .= "\r".$params['footer-files'];
		
	$params['body'] = $body;
	
	return $params;
}

// Load a gallery album, if that fails, try the default album
function loadAlbum( $name, &$params ) {
	flush();
	global $gallery, $defaultAlbum;

	// is it already loaded? (saves time)	
	if ( $gallery->album->fields['name'] == $name ) {
		setGalleryParams( $params );
		return true;
	}

	// no, try and load it
	unset( $gallery->album );
	$gallery->album = new Album;
	
	$albumRet = $gallery->album->load($name);
	if ($albumRet) {
		setGalleryParams( $params );
		return true;
	}
	else {
		reportError( "Unable to load album '$name'", $params);
		if ( $name == $defaultAlbum ) {
			reportError( "Album '$name' was the default album and unable to be loaded", $params );
			return false;
		}

		unset( $gallery->album );
		$gallery->album = new Album;
		$albumRet = $gallery->album->load($defaultAlbum);
		if ($albumRet) {
			setGalleryParams( $params );
			return true;
		}

		reportError( "Unable to load the default album '$defaultName'", $params);
		return false;
	}
}

// places gallery locations into params array
function setGalleryParams( &$params ) {
	global $gallery;
	$parsedUrl = parse_url($gallery->app->albumDirURL);
	$params['image_base_uri'] = $parsedUrl['path'].'/'.$gallery->album->fields['name'];
	$parsedUrl = parse_url($gallery->app->photoAlbumURL);
	$params['image_link_base_uri'] = $parsedUrl['path'].'/'.$gallery->album->fields['name'];	
}

// run any commands
function runCommands( $text, &$params ) {
	$exploded = explode( '|', $text );
	$commands = array( );

	for( $i=0; $i<count($exploded); $i++ ) {
		$data = explode( ":", $exploded[$i],2 );
		$commands[ trim($data[0]) ] = trim( $data[1] ); 
	}

	if ( $commands['album']!='' ) {
		printMessage( "<em>Changing album to {$commands['album']}</em>" );
		$params['albumName'] = $commands['album'];
	} else if ( $commands['newalbum']!='' ) {
		$v = explode( ' ', $commands['newalbum'], 3 );
		if ( count($v)>=2 ) {
			if ($v[1]=='/')
				$v[1]=null;
		
			$rv = createNewAlbum( $v[1], sanitize($v[0]), $v[2] );
			if ( !$rv )	
				printMessage("Unable to create new album named '{$v[1]}'");
			else {
				printMessage("Created new album called '$rv'");
				$params['albumName'] = $rv;
			}
		}		
	}

}

// [body]					- the body text
// [body-type]				- numerical value for importance of the body
function get_body_from_mail( &$part, &$content ) 
{
	decodeAndFixCharset( $part );
	
	switch ( strtolower($part->ctype_primary) )
	{
		case 'multipart':
			$sections = array_keys( $part->parts );
			foreach ($sections as $section)
				get_body_from_mail( $part->parts[$section], $content );
			break;

		case 'text':
			// make sure not an attachment!
			// outlook & thunderbird differ in implementation here, in outlook they are marked with disposition 'attachment', in thunderbird they are 'inline'
			// either way, if the disposition is set, its safe to think its an attachment
			if ( $part->disposition!='' )
				break;
								
			// determine what the type is
			if ($part->ctype_secondary=='enriched') 
				$newBodyType = BODYTYPE_ENRICHED;
			elseif ($part->ctype_secondary=='html') 
				$newBodyType = BODYTYPE_HTML;
			else
				$newBodyType = BODYTYPE_PLAIN;
			
			// if not better than what we have already got, forget it
			if ( $newBodyType >= $content['body-type'] ) {
				$content['body-type'] = $newBodyType;
				$content['body'] = $part->body;
			}	
			break;
	}
}

// process the attachements in the mail message
function process_attachments( &$part, &$body, &$imgTags, &$params, $postToGallery )
{
	global $FILES_PATH, $ROOTDIR, $gallery;
	
	switch ( strtolower($part->ctype_primary) )
	{
		case 'multipart':
			$sections = array_keys( $part->parts );
			foreach ($sections as $section)
				process_attachments( $part->parts[$section], $body, $imgTags, $params, $postToGallery);
			break;

		case 'image':			
			// write file to the disk
			$filename = $part->ctype_parameters['name'];
			//'i_'.rand() . '.' . strtolower($part->ctype_secondary);
			$file = realpath( $ROOTDIR. $FILES_PATH ). '/'.$filename ;
			print "$file\r\n";
			$fp = fopen($file, 'w');
			fwrite($fp, $part->body);
			fclose($fp);
			unset( $part->body );
			@exec ('chmod 755 ' . $file);
			
			// get the cid url
			$cid = contentidToCidUrl( $part->headers['content-id'] );

			// find references inside the html
			$finds = array_keys( $imgTags[1], $cid );
			if ( $finds == null ||count($finds) == 0 ) {
				// no references, add to the bottom of the body afterwards
				$params['footer-images'] .= getImageTag( $file, $meta, $params, $postToGallery, true );
			} else {
				// loop through every occurance replacing it with new tag
				foreach( $finds as $imgKey ) {
					$newTag = getImageTag( $file, $imgTags[2][$imgKey], $params, $postToGallery );
					$search = $imgTags[0][$imgKey];
					$body= str_replace( $search, $newTag, $body );
				}
			}
			break;
			
		default:			
			// deal with all other attachments
			// outlook & thunderbird differ in implementation here, in outlook they are marked with disposition 'attachment', in thunderbird they are 'inline'
			// either way, if the disposition is not set, its safe to think its part of the message
			if ( $part->disposition=='' )
				break;
			//pgp signature - then forget it
			if ( $part->ctype_secondary == 'pgp-signature' ) 
				break;

			//other attachments save to $FILESDIR
			$filename =  $part->ctype_parameters['name'];
			$file = realpath($ROOTDIR. $FILES_PATH) . '/'.$filename;
			$fp = fopen($file, 'w');
			fwrite($fp, $part->body );
			fclose($fp);
			@exec ('chmod 755 ' . $file);				
			unset( $part->body );

			$params['footer-files'] .= '<a href="' . $params['URLFILESDIR'].rawurlencode( $filename) . '">' . $part->ctype_parameters['name'] . '</a> ';
			
	}
}

// import into gallery
// return an image tag that is either going to be placed inline or added to the end of the image.
// if placed inline, will replace the image tag already there
// will thumbnail if required and image is big.
// meta contains the stuff in brackets *immediately after* (i.e. no space) an image, contains | seperated items, and the last item is the comment/alt tag
function getImageTag( $filename, $metatext, &$params, $postToGallery, $footerImage = false ) {
	global $gallery;
	$imageStyles = array();
	$pathInfo = pathinfo($filename);
	$extra_fields = array();
	$fullImageLink = '';		// Link to full image
	$fullImageURI = '';			// location of full image
	$thumbImageURI = '';		// location of thumb
	$closeTags = '';			// closure of tags 
	$imgClass = 'thumbFromGallery';		// css class of image

	$rawFilename = substr($pathInfo['basename'], 0, -(strlen($pathInfo['extension'])+1));   // get name without extension
	$filenameNoExtension = $rawFilename;
		
	// fix filename - code from gallery util.php {{{{
	// replace multiple non-word characters with a single "_"
	$rawFilename = ereg_replace("[^[:alnum:]]", "_", $rawFilename);
	/* Get rid of extra underscores */
	$rawFilename = ereg_replace("_+", "_", $rawFilename);
	$rawFilename = ereg_replace("(^_|_$)", "", $rawFilename);
	
	// need to prevent users from using original filenames that are purely numeric.
	if (ereg("^([0-9]+)$", $rawFilename))
		$rawFilename .= "_G";
	// }}}
	
	$defaultComment = $rawFilename;
		
	$meta = processMeta( $metatext, $filenameNoExtension );
	
	if ( !empty( $meta['tags']['description']) )
		$extra_fields['Description'] = $meta['tags']['description'];

	if ( $postToGallery ) {
		$err = $gallery->album->addPhoto($filename, $pathInfo['extension'], $rawFilename  , $meta['comment'],"", $extra_fields );
		
		if ($err) {
			reportError( "Error from Gallery whilst adding to album: $err", $params );
			$postToGallery = false;		// just do flat link
		} else {
			unlink($filename); 						//remove original file

			$photo = &$gallery->album->photos[ count($gallery->album->photos)-1 ];

			$fullImageLink = $params['image_link_base_uri'].'/'.urlencode($photo->image->name);
			$fullImageURI = $params['image_base_uri'].'/'.urlencode($photo->image->name.'.'.$photo->image->type);
			$thumbImageURI = $params['image_base_uri'].'/'.urlencode($photo->thumbnail->name.'.'.$photo->thumbnail->type);
			$params['galleryImagesPosted'][] =& $photo;
		}
	} 
	
	// this is not an 'else' because if posting to gallery fails, we can recover by just using the fill images
	
	if ( !$postToGallery) {
		//gallery borked or album not found, do the best we can, just insert the image
		$pathinfo = pathinfo($filename);
		$thumbImageURI = $params['URLFILESDIR'].urlencode($pathinfo['basename']);
		$fullImageURI = $thumbImageURI;
	}

	// process any meta tags;
	if ( $footerImage )
		$imageStyles['vertical-align'] = 'middle';
	else {
		$align = get_option( 'wgm-imageAlignment' );
		if ( isset($meta['tags']['left']) )
			$align = 1;
		else if ( isset($meta['tags']['right']) )
			$align = 2;
		else if ( isset($meta['tags']['center']) || isset($meta['tags']['centre']) )
			$align = 3;
	
		switch( $align ) {
			case 1:
				$imageStyles['float'] = 'left';
				$params['used-floats'] = true;
				break;
			case 2:
				$imageStyles['float'] = 'right';
				$params['used-floats'] = true;
				break;
			case 3:
				$tag = "<div class=\"galleryCentreBlock\">".$tag;
				$imgClass = "galleryCentreImage";
				$closeTags = "</div>\n";
				$thumbImageURI = $fullImageURI;
		}
	}

	if ( $meta['tags']['border']!='' )
		$imageStyles['border'] = $meta['tags']['border'];

	if ( $fullImageLink!='' ) {
		$tag .= "<a href=\"$fullImageLink\">";
		$closeTags = '</a>'.$closeTags;
	}
	
	$tag .= "<img class=\"$imgClass\" src=\"$thumbImageURI\" alt=\"".htmlentities($meta['comment'])."\" title=\"".htmlentities($meta['comment'])."\" ";
	
	if ( count($imageStyles)>0 )
		$tag .= "style=\"". buildStyleString($imageStyles) ."\" ";
	
	$tag .= '/>'.$closeTags;
	
	return $tag;
}

// takes the meta text and splits it into meta info and comment
function processMeta( $metatext, $defaultcomment='' ) {
	// kill &nbsp; and change " to &quot;
	$metatext = trim( str_replace( array('&nbsp;','"') , array(' ','&quot;') , $metatext) );

	$exploded = explode( '|', $metatext );
	$meta = array( 'tags'=>array() );
	
	if ( count($exploded)== 1 ) {
		if ( $metatext=='' )
			$meta['comment'] = trim($defaultcomment);
		else
			$meta['comment'] = trim($metatext);
	} else {
		for( $i=0; $i<count($exploded)-1; $i++ ) {
			$tag = explode( ":", $exploded[$i],2 );
			$meta['tags'][ trim($tag[0]) ] = trim( $tag[1] ); 
		}
		$meta['comment'] = trim($exploded[ count($exploded) -1 ]);		// could have just used exploded[$i] here, but for clarity...
	}

	return $meta;
}

function ubb2html($text)
{
	// Array of tags with opening and closing
	$tagArray['img'] = array('open'=>'<img src="','close'=>'">');
	$tagArray['b'] = array('open'=>'<b>','close'=>'</b>');
	$tagArray['i'] = array('open'=>'<i>','close'=>'</i>');
	$tagArray['u'] = array('open'=>'<u>','close'=>'</u>');
	$tagArray['url'] = array('open'=>'<a href="','close'=>'">\\1</a>');
	$tagArray['email'] = array('open'=>'<a href="mailto:','close'=>'">\\1</a>');
	$tagArray['url=(.*)'] = array('open'=>'<a href="','close'=>'">\\2</a>');
	$tagArray['email=(.*)'] = array('open'=>'<a href="mailto:','close'=>'">\\2</a>');
	$tagArray['color=(.*)'] = array('open'=>'<font color="','close'=>'">\\2</font>');
	$tagArray['size=(.*)'] = array('open'=>'<font size="','close'=>'">\\2</font>');
	$tagArray['font=(.*)'] = array('open'=>'<font face="','close'=>'">\\2</font>');
	// Array of tags with only one part
	$sTagArray['br'] = array('tag'=>'<br>');
	$sTagArray['hr'] = array('tag'=>'<hr>');
	
	foreach($tagArray as $tagName=>$replace)
	{
		$tagEnd=preg_replace('/\W/Ui','',$tagName);
		$text = preg_replace("|\[$tagName\](.*)\[/$tagEnd\]|Ui","$replace[open]\\1$replace[close]",$text);
	}
	foreach($sTagArray as $tagName=>$replace)
	{
		$text= preg_replace("|\[$tagName\]|Ui","$replace[tag]",$text);
	}
	return $text;
}

// This function turns Enriched Text into something similar to html
// Very basic at the moment, only supports some functionality and dumps the rest
// FIXME: fix colours: <color><param>FFFF,C2FE,0374</param>some text </color>
function etf2html ( $content )
{

	$search = array(
		'/<bold>/',
		'/<\/bold>/',
		'/<underline>/',
		'/<\/underline>/',
		'/<italic>/',
		'/<\/italic>/',
		'/<fontfamily><param>.*<\/param>/',
		'/<\/fontfamily>/',
		'/<x-tad-bigger>/',
		'/<\/x-tad-bigger>/',
		'/<bigger>/',
		'</bigger>/',
		'/<color>/',
		'/<\/color>/',	
		'/<param>.+<\/param>/'
	);
	
	$replace = array (
		'<b>',
		'</b>',
		'<u>',
		'</u>',
		'<i>',
		'</i>',
		'',
		'',
		'',
		'',
		'',
		'',
		'',
		'',
		''
	);
		// strip extra line breaks
		$content = preg_replace($search,$replace,$content);
		return trim($content);
}

// see if sender is a valid sender from the wp database
// return poster_id or 0 for invalid poster
function checkposter ( $from )
{
	global $wpdb,$tableusers,$poster,$default_poster_id;

	//work around for users with extra <> in email address
	if (preg_match('/^[^<>]+<([^<>]+)>$/',$from,$matches))
		$from = $matches[1];

	if ( empty($from) ) {
		printMessage( '<h1> Invalid Sender - Emtpy! </h1>' );
		return 0;
	}
	
	$sql = 'SELECT id FROM '. $tableusers.' WHERE user_email=\'' . addslashes($from) . '\'';
	$poster = $wpdb->get_var($sql);
	if (!$poster) {
		// the sender has not been recognised, use a default?
		if ( $default_poster_id != 0 )
			return $default_poster_id;
		printMessage( '<h1>Invalid sender: ' . htmlentities($from) . " !</h1><h2>Not adding email!</h2>\n" );
		return 0;
	} else {
		return $poster;
	}
}

//filter content for new lines
function filternewlines ( $content )
{
		$search = array (
			'/ (\n|\r\n|\r)/',
			'/(\n|\r\n|\r)/'
		);
		$replace = array (
			' ',
			"\n"
		);
		// strip extra line breaks
		$return = preg_replace($search,$replace,$content);
		return $return;
}

// Keeps content until finds a line with '--' or '- --'
// This effectively removes signatures
function removesig ( $content )
{
	$arrcontent = explode("\n", $content);
	$append = TRUE;
	$i = 0;
	for ($i = 0; $i<=count($arrcontent); $i++) 
	{
		$line = $arrcontent[$i];
		$nextline = $arrcontent[$i+1];
		printMessage(  "<div>line $i</div><pre>$line\r\n</pre>" );
		if ( preg_match('/^--$/',trim($line)) OR preg_match('/^- --$/',$line) ) 
		{ $append = FALSE; } 
		if ( $append == TRUE )
	    {
	//		if ($line != NULL && $nextline == NUL' )
			//{ $strcontent .= $line ."</br>\n";; 
			//check if there are null lines \n
			//} elseif ($line == NULL && $nextline == NULL) { $strcontent .= '</br>';	
			//}else	{ 
				$strcontent .= $line ."\n";
		}
	}
	return $strcontent;
}

//strip pgp stuff
function strip_pgp ( $content )
{
		$search = array (
			'/-----BEGIN PGP SIGNED MESSAGE-----/',
			'/Hash: SHA1/'
		);
		$replace = array (
			' ',
			''
		);
		// strip extra line breaks
		$return = preg_replace($search,$replace,$content);
		return $return;
}

// decode from transfer encoding and decode charset
function decodeAndFixCharset( &$part ) {
	if ( strtolower($part->headers['content-transfer-encoding']) == 'base64' )
		$part->body = base64_decode($part->body);
	elseif ( strtolower($part->headers['content-transfer-encoding']) == 'quoted-printable' )
		$part->body = quoted_printable_decode( $part->body );
	if ( strtolower($part->ctype_parameters['charset'] == 'utf-8') )
		$part->body = utf8_decode($part->body);
}

//fixes up html, strips dodgy tags and takes newlines out (as outlook can wrap a tag across a line break which then gets broken by nl2br type code
function html2html( $content ) {
	$content = strip_tags( $content, "<p><img><strong><em><code><a><br>" );

	//strip out excess white space and convert <p> tags to newlines 
	$search = array ( "'\s+'",               	// Strip out extra white space
						"'<p[^>]*?>'si",		// paragraph
						"'</p[^>]*?>'si",		// end paragraph
						"'<br[^>]*?>'si"		// BRs to NLs
						);                    
	$replace = array (" ",
			"",
			"\n",
			"\n"
		);

	$content= preg_replace($search, $replace, $content);
	return trim($content);
}

// takes the content-id string from email and turns in into a link
function contentidToCidUrl( $contentId ) {
	$search = array ( '/</', '/>/' );
	$replace = array ( 'cid:', '');
	return preg_replace($search,$replace,$contentId);
}

// takes an array of styles ['key'] => ['value'] and build into "key: value" for html style attribute
function buildStyleString( $arrayOfStyles ) {
	$style = '';
	foreach( $arrayOfStyles as $key=>$value ) {
		if ( $style!='' )
			$style .= '; ';
		$style .= "$key: ".htmlentities( $value, ENT_QUOTES );
	}
	return $style;
}

function formatHTMLErrors( $errors ) {
	$string = "<div class=\"wp-gallery-mail-errors\">";
	$count = 0;
	foreach( $errors as $error ) {
		if ( $count>0 )
			$string .= '<br />';
		$string .= $error;
	}
	$string .= "</div>";
	return $string;
}

function reportError( $error, &$params ) {
	$params['errors'][] = $error;
	printMessage( "<strong>$error</strong><br />" );
	flush();
}

//output a message. If in SMTP mode, log it to a file
function printMessage($message) {
	global $input_protocol;

	if ( $input_protocol == 1 ) {
		//log here
	} else
		print $message."<br />";
}

function sanitize($in) {
	return preg_replace('/\s\s+/', '-', $in);
}

// end of script
?>